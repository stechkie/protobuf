// Protocol Buffers - Google's data interchange format
// Copyright 2008 Google Inc.  All rights reserved.
// https://developers.google.com/protocol-buffers/
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following disclaimer
// in the documentation and/or other materials provided with the
// distribution.
//     * Neither the name of Google Inc. nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#include "google/protobuf/compiler/r/r_generator.h"

#include <algorithm>
#include <sstream>
#include <string>
#include <vector>

#include "google/protobuf/compiler/code_generator.h"
#include "absl/container/flat_hash_map.h"
#include "absl/container/flat_hash_set.h"
#include "absl/log/absl_log.h"
#include "absl/strings/ascii.h"
#include "absl/strings/escaping.h"
#include "absl/strings/str_cat.h"
#include "absl/strings/str_replace.h"
#include "absl/strings/str_split.h"
#include "absl/strings/string_view.h"
#include "google/protobuf/compiler/retention.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/descriptor.pb.h"
#include "google/protobuf/descriptor_legacy.h"
#include "google/protobuf/io/printer.h"
#include "google/protobuf/io/zero_copy_stream.h"

namespace google {
namespace protobuf {
namespace compiler {
namespace r {

struct Options {
  bool is_descriptor = false;
  bool aggregate_metadata = false;
  bool gen_c_wkt = false;
  absl::flat_hash_set<std::string> aggregate_metadata_prefixes;
};

std::string ModuleName(absl::string_view filename) {
  std::string basename = StripProto(filename);
  absl::StrReplaceAll({{"-", "_"}, {"/", "."}}, &basename);
  return absl::StrCat(basename, "_pb");
}

std::string GetFileName(const FileDescriptor* file_des,
                        absl::string_view suffix) {
  std::string module_name = ModuleName(file_des->name());
  std::string filename = module_name;
  absl::StrReplaceAll({{".", "/"}}, &filename);
  absl::StrAppend(&filename, suffix);
  return filename;
}

FileDescriptorProto StripSourceRetentionOptions(const FileDescriptor& file,
                                                bool include_source_code_info) {
  FileDescriptorProto file_proto;
  file.CopyTo(&file_proto);
  // std::vector<std::vector<int>> stripped_paths;
  // ConvertToDynamicMessageAndStripOptions(file_proto, *file.pool(),
  //                                      &stripped_paths);
  if (include_source_code_info) {
    file.CopySourceCodeInfoTo(&file_proto);
    // StripSourceCodeInfo(stripped_paths, *file_proto.mutable_source_code_info());
  }
  return file_proto;
}

void Generator::PrintTopBoilerplate() const {
  printer_->Print(
      "# -*- coding: utf-8 -*-\n"
      "# Generated by the protocol buffer compiler.  DO NOT EDIT!\n"
      "# source: $filename$\n"
      "# Generated protocol buffer code for $filename$\n",
      "filename", file_->name());

  printer_->Print("\n\n");

  printer_->Print("library(\"R6\")\n");

  printer_->Print("\n\n");
}

void Generator::PrintMessageClasses() const {
// TODO : check what MapEntry classes are which used in php
  for (int i = 0; i < file_->message_type_count(); i++) {
    const Descriptor* message = file_->message_type(i);
    Options options;
    std::string base;
    std::string name = message->name();
    std::cerr<<"Name is "<<name<<std::endl;

    switch (message->well_known_type()) {
      case Descriptor::WELLKNOWNTYPE_ANY:
        base = "\\Google\\Protobuf\\Internal\\AnyBase";
        break;
      case Descriptor::WELLKNOWNTYPE_TIMESTAMP:
        base = "\\Google\\Protobuf\\Internal\\TimestampBase";
        break;
      default:
        base = "\\Google\\Protobuf\\Internal\\Message";
        break;
    }


    printer_->Print(
      "# R class for $name$ message\n"
      "$name$ <- R6Class(\"$name$\",\n",
      "name", name);
    printer_->Indent();

    printer_->Print(
      "public = list(\n"
    );
    printer_->Indent();


    // Field definitions
    for(int j=0; j < message->field_count(); j++) {
      const FieldDescriptor* field = message->field(j);
      std::string fieldName = field->name();
      std::cerr<<"fieldName is "<<fieldName<<std::endl;

      if (field->is_repeated()) {
        printer_->Print(
          "$name$ = list()",
          "name", fieldName
        );
      }
      else {
        printer_->Print(
          "$name$ = NULL",
          "name", fieldName
        );
      }
      
      if (j < message->field_count()-1) {
        printer_->Print(",\n");
      }
    }
    printer_->Print(
      "\n"
    );
    printer_->Outdent();
    printer_->Print(
      ")\n"
    );
    printer_->Outdent();
    printer_->Print(
      ")\n"
    );
  }

}

bool Generator::Generate(
    const FileDescriptor* file,
    const std::string& parameter,
    GeneratorContext* context,
    std::string* error) const {
  // TODO : add lock if required later, see if this in needed
  absl::MutexLock lock(&mutex_);
  file_ = file;

  std::string filename = GetFileName(file, ".R");

  // set include source info to false for now
  FileDescriptorProto fdp = StripSourceRetentionOptions(*file_, false);
  fdp.SerializeToString(&file_descriptor_serialized_);

  std::unique_ptr<io::ZeroCopyOutputStream> output(context->Open(filename));
  ABSL_CHECK(output.get());
  io::Printer printer(output.get(), '$');
  printer_ = &printer;

  PrintTopBoilerplate();

  PrintMessageClasses();

  return !printer.failed();
}

}  // namespace r
}  // namespace compiler
}  // namespace protobuf
}  // namespace google
